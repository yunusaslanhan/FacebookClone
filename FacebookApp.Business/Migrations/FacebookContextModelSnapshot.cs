// <auto-generated />
using System;
using FacebookApp.Business.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FacebookApp.Business.Migrations
{
    [DbContext(typeof(FacebookContext))]
    partial class FacebookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FacebookApp.Domain.Entities.Friend", b =>
                {
                    b.Property<int>("FromUserFriendId");

                    b.Property<int>("ToUserFriendId");

                    b.HasKey("FromUserFriendId", "ToUserFriendId");

                    b.HasIndex("ToUserFriendId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("FacebookApp.Domain.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FromId");

                    b.Property<string>("MessageText")
                        .IsRequired();

                    b.Property<int>("ToId");

                    b.HasKey("MessageId");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FacebookApp.Domain.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentCount");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("LikeCount");

                    b.Property<string>("PostImage");

                    b.Property<string>("PostText");

                    b.Property<int>("ShareCount");

                    b.Property<int>("UserId");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("FacebookApp.Domain.Entities.PostComment", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("PostId");

                    b.Property<string>("CommentText")
                        .IsRequired();

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("PostCommentId");

                    b.HasKey("UserId", "PostId");

                    b.HasAlternateKey("PostCommentId");

                    b.HasIndex("PostId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("FacebookApp.Domain.Entities.PostLike", b =>
                {
                    b.Property<int>("PostId");

                    b.Property<int>("UserId");

                    b.Property<int>("PostLikeId");

                    b.HasKey("PostId", "UserId");

                    b.HasAlternateKey("PostLikeId");

                    b.HasIndex("UserId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("FacebookApp.Domain.Entities.PostShare", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("PostId");

                    b.Property<int>("PostShareId");

                    b.HasKey("UserId", "PostId");

                    b.HasAlternateKey("PostShareId");

                    b.HasIndex("PostId");

                    b.ToTable("PostShares");
                });

            modelBuilder.Entity("FacebookApp.Domain.Entities.RequestFriend", b =>
                {
                    b.Property<int>("FromUserId");

                    b.Property<int>("ToUserId");

                    b.HasKey("FromUserId", "ToUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("RequestFriends");
                });

            modelBuilder.Entity("FacebookApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Photo")
                        .HasMaxLength(100);

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FacebookApp.Domain.Entities.Friend", b =>
                {
                    b.HasOne("FacebookApp.Domain.Entities.User", "FromUserFriend")
                        .WithMany("FromUserFriend")
                        .HasForeignKey("FromUserFriendId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FacebookApp.Domain.Entities.User", "ToUserFriend")
                        .WithMany("ToUserFriend")
                        .HasForeignKey("ToUserFriendId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FacebookApp.Domain.Entities.Message", b =>
                {
                    b.HasOne("FacebookApp.Domain.Entities.User", "FromUser")
                        .WithMany("FromMessage")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FacebookApp.Domain.Entities.User", "ToUser")
                        .WithMany("ToMessage")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FacebookApp.Domain.Entities.Post", b =>
                {
                    b.HasOne("FacebookApp.Domain.Entities.User", "user")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FacebookApp.Domain.Entities.PostComment", b =>
                {
                    b.HasOne("FacebookApp.Domain.Entities.Post", "postId")
                        .WithMany("PostComment")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FacebookApp.Domain.Entities.User", "userId")
                        .WithMany("PostComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FacebookApp.Domain.Entities.PostLike", b =>
                {
                    b.HasOne("FacebookApp.Domain.Entities.Post", "postId")
                        .WithMany("PostLike")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FacebookApp.Domain.Entities.User", "userId")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FacebookApp.Domain.Entities.PostShare", b =>
                {
                    b.HasOne("FacebookApp.Domain.Entities.Post", "postId")
                        .WithMany("PostShare")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FacebookApp.Domain.Entities.User", "userId")
                        .WithMany("PostShares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FacebookApp.Domain.Entities.RequestFriend", b =>
                {
                    b.HasOne("FacebookApp.Domain.Entities.User", "FromRequestUser")
                        .WithMany("FromRequestUser")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FacebookApp.Domain.Entities.User", "ToRequestUser")
                        .WithMany("ToRequestUser")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
